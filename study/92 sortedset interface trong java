- SortedSet Interface trong Java

- SortedSet Interface trong Java

+ SortedSet Interface trong Java kế thừa Set và khai báo các hành vi của một Set được xếp thứ tự tăng dần.
Ngoài những phương thức được định nghĩa bởi Set, thì SortedSet Interface trong Java khai báo các phương thức được liệt kê trong bảng dưới đây.

+ Một số phương thức ném một NoSuchElementException khi không có item nào được chứa trong Set đang gọi.
Một ClassCastException được ném khi một đối tượng không tương thích với phần tử trong một Set.

+ Một NullPointerException được ném nếu cố gắng sử dụng một đối tượng null và null không được phép trong Set.

- Phương thức và Miêu tả

+ Comparator comparator( )
Trả về bộ so sánh của Sorted Set đang gọi. Nếu thứ tự tự nhiên được sử dụng cho Set này, thì trả về null

+ Object first( )
Trả về phần tử đầu tiên trong Sorted Set đang gọi

+ SortedSet headSet(Object end)
Trả về một SortedSet chứa các phần tử nhỏ hơn end mà được chứa trong Sorted Set đang gọi. 
Các phần tử trong sorted set trả về cũng được tham chiếu bởi Sorted Set đang gọi

+ Object last( )
Trả về phần tử cuối cùng trong Sorted Set đang gọi

+ SortedSet subSet(Object start, Object end)
Trả về một Sorted Set mà bao gồm các phần tử giữa start và end-1. Các phần tử trong Collection trả về cũng được tham chiếu bởi đối tượng đang gọi

+ SortedSet tailSet(Object start)
Trả về một SortedSet mà chứa các phần tử lớn hơn hoặc bằng start mà được chứa trong sorted set.
Các phần tử trong set trả về cũng được tham chiếu bởi đối tượng đang gọi

- Ví dụ

+ SortedSet Interface trong Java có sự triển khai trong các lớp đa dạng như TreeSet 

public class SortedSetTest {

   public static void main(String[] args) {

      // Tap sortedset
      SortedSet set = new TreeSet(); 

      // Them phan tu vao set
      set.add("b");
      set.add("c");
      set.add("a");

      // Lap qua cac phan tu trong set
      Iterator it = set.iterator();
      while (it.hasNext()) {
         // Lay phan tu
         Object element = it.next();
         System.out.println(element.toString());
      }
   }
}
